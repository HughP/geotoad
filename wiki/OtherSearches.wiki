#summary Other searches with GeoToad
#labels Featured

= Using GeoToad for searches which are not built in =

_*Note:* Tested with Debian Linux and bash. Adaptions may be necessary._

<wiki:toc max_depth="2">

== "Proximity" search around an existing geocache ==

There has been a request for "proximity" searches:
Sometimes, you plan to attend an event, or want to visit one of the
"geocaching legends" as "${my_country}'s First", and you don't want
to miss the little D1/T1 traditional around the corner.

Here's a suggestion how to accomplish this (you will have to
add your credentials, and modify some other search parameters,
but you'll get the idea):

{{{
#!/bin/bash

CENTER=GC77       # or whatever should be the center of your search
DISTANCE=2km      # radius around $CENTER

# extract coordinates for $CENTER cache
geotoad -q wid -x list -o `pwd`/$CENTER.list $CENTER

# get coordinates from list
COORDS=`awk '{printf("%s,%s\n",$2,$3)}' $CENTER.list`

# now run the real query
geotoad -q coord -x gpx -o `pwd`/$CENTER-prox.gpx "$COORDS"
}}}

== Searches along a given track/route (issue 103) ==

{{{
#!/bin/bash

input=input.gpx # some file you picked up at e.g. openrouteservice.org

error=0.25k     # Douglas-Peucker tolerance
distance=1.25k  # interpolation distance
circle=1.00km   # search radius

# note: error/circle ~ 1/4, distance/circle ~ 5/4 will give you
# an approximate coverage of about 2/3 circle radius

# for a half-mile wide corridor along your route: 
#error=0.2m
#distance=1m
#circle=0.8mi

# simplify input with Douglas-Peucker,
# then interpolate for point distance,
# output as series of coordinates suited for geotoad

searchargs=$(
cat $input |
gpsbabel -i gpx -f - \
    -x simplify,crosstrack,error=$error \
         -o gpx -F - |
gpsbabel -i gpx -f - \
    -x interpolate,distance=$distance \
         -o csv -F - |
tr ',' ' ' |
awk '{printf("%.3f,%.3f|",$1,$2)}'

)

echo geotoad ... -y$circle -q coord \"$searchargs\"
}}}

Note the number of decimals in the "printf" command -
it will limit center point precision to about 100 metres
which should be sufficient in most cases.

The values for "error", "distance" and "circle" have to be adjusted by hand.
The ratio distance/circle obviously has to be smaller than 2 ;)

<wiki:comment>
== Parsing bookmark lists (issue 227) ==

{{{
#!/bin/bash

# example: Berlin/Brandenburg area night caches
listguid="cbb21edf-fb9e-45b5-9b27-c51fd6453cbf"

# extract list of guids from KML file
GUIDS=`
lynx -source "http://www.geocaching.com/kml/bmkml.aspx?bmguid=$listguid" \
| perl -ne 'if(/\?guid=([0-9a-f-]+)/){printf("%s:",$1)}'
`

# now run the real query
geotoad -q guid -x gpx -o `pwd`/list_$listguid.gpx "$GUIDS"
}}}

</wiki:comment>
== Removing mystery caches from GPX ==

Do you use a handheld for actual geocaching, and a navigation system to
reach your targets? If so, you probably don't want mystery caches to be
shown on the screen while driving. Running the same search with and
without cache type "unknown" is time-consuming and error-prone.

The following Ruby scriptlet *gpxdemystify* will strip "Unknown" caches from
a GPX file produced by GeoToad:

{{{
#!/usr/bin/env ruby
puts $stdin.read.split(/<\/wpt>/).map { |fragment|
    (fragment !~ /<groundspeak:type>Unknown Cache/m) ? fragment : nil
}.compact.join("</wpt>")
}}}

to be run as follows:   {{{gpxdemystify <input.gpx >output.gpx}}}

== Merging riddle solutions into GPX ==

Similarly, it is possible to merge a list of "solved" mysteries into
an existing GPX, using *gpxsolutions* as follows:

{{{
#!/usr/bin/env ruby
# merge solved mysteries into GPX file

# first read solutions (WPID lat lon) from table
solutions = Hash.new
begin
File.foreach("#{ARGV[0]}") { |line|
    columns = line.upcase.split(/\s+/)
    name = columns[0]
    lat = columns[1]
    lon = columns[2]
    gcid = "GC" + name[2..-1]
    wpnr = name[0..1]
    case wpnr
    when /GC/
	type = 'Traditional Cache'
    when /\d./
	type = 'Multi-cache'
    end
    solutions[gcid] = {'wpnr'=>wpnr, 'lat'=>lat, 'lon'=>lon, 'type'=>type}
}
rescue
    $stderr.puts "Cannot read #{ARGV[0].inspect}, will not modify anything"
end

# now merge into GPX (UNIX filter!)
puts $stdin.read.split(/<\/wpt>/).map { |fragment|
    # only modify mystery caches!
    if fragment =~ /<name>(GC.*?)<\/name>.*?<groundspeak:type>Unknown Cache/m
	gcid = $1
	if fragment =~ /<groundspeak:name>(.*?)</m
	    name = $1
	end
	solution = solutions[gcid]
	if solution
	    wpnr = solution['wpnr']
	    lat = solution['lat']
	    lon = solution['lon']
	    type = solution['type']
	    fragment.gsub!(/lat="[\d\.-]+"/, "lat=\"#{lat}\"")
	    fragment.gsub!(/lon="[\d\.-]+"/, "lon=\"#{lon}\"")
	    fragment.gsub!(/Unknown Cache</, "#{type}<")
	    fragment.gsub!(/<groundspeak:short_description[^>]*>/) { |s| s.gsub(/>/, ">[+#{wpnr}]=") }
	    $stderr.printf "Modified %7s: %s = %s %s \"%s\"\n", gcid,wpnr,lat,lon,name
	end
    end
    fragment
}.join("</wpt>")
}}}

----

_(More to be added. Suggestions welcome.)_
